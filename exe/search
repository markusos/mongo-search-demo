#!/usr/bin/env -S uv run python
"""Interactive TUI for Wikipedia vector search knowledge base.

This script provides an interactive TUI (like htop) for searching the Wikipedia
knowledge base using vector search, text search, or hybrid search methods.
"""

import sys
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from loguru import logger

from src.config_loader import load_config
from src.embedding_service import EmbeddingGenerator
from src.mongodb_manager import MongoDBManager
from src.search_service import SearchService
from src.search_tui import SearchApp


def setup_logging(verbose: bool = False) -> None:
    """Configure logging to file to avoid interfering with TUI."""
    logger.remove()  # Remove default handler

    # Log to file instead of stderr to avoid corrupting TUI display
    log_file = Path(__file__).parent.parent / "logs" / "search.log"
    log_file.parent.mkdir(exist_ok=True)

    if verbose:
        logger.add(log_file, level="DEBUG", rotation="10 MB")
    else:
        logger.add(log_file, level="INFO", rotation="10 MB")


def main() -> None:
    """Main entry point."""
    # Load .env file if it exists
    env_path = Path(__file__).parent.parent / ".env"
    if env_path.exists():
        from dotenv import load_dotenv

        load_dotenv(env_path)

    setup_logging(verbose=False)

    try:
        # Load configuration
        config = load_config()

        # Initialize services
        db_manager = MongoDBManager(config=config.mongodb)
        embedding_gen = EmbeddingGenerator(config=config.embedding)
        search_service = SearchService(db_manager, embedding_gen)

        # Run app
        app = SearchApp(search_service, db_manager)
        app.run()
    except Exception as e:
        logger.error(f"Failed to initialize: {e}")
        print(f"Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
